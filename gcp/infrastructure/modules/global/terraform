#!/usr/bin/env python3

"""
Terraform wrapper to deploy resources
"""

import os
import sys
import argparse
import requests
import subprocess
import json
import shutil
import glob
from rich.console import Console

console = Console(force_terminal=True)

# declare variables
module_path = os.path.dirname(os.path.abspath(__file__))
var_file = '%s/values.tfvars.json' % module_path
deletion_protection = True

# parse file 'values.tfvars.json' to get list of modules
with open(var_file, 'r') as file:
	file_contents = json.load(file)
	backend_bucket = file_contents['backend']['backend_bucket']
	list_modules = file_contents['terraform']['modules']
	
	list_modules.append('all')

# declare command-line arguments
parser = argparse.ArgumentParser(description='Deploy modules to the Google Cloud Platform using Terraform')
parser.add_argument('action', choices=['plan', 'apply', 'destroy'])
parser.add_argument('modules', nargs='?', choices=list_modules, default='all')
parser.add_argument('-o', '--organization')
parser.add_argument('-p', '--project', required=True)
parser.add_argument('-r', '--region', required=True)
args = parser.parse_args()

# substitute variables in a file 'values.tfvars.json'
def substitute_tfvars():
	with open(var_file, 'r') as file:
	    file_contents = file.read()

	if any(prefix in file_contents for prefix in ['TF_', 'GCP_', 'CI_']):
		shutil.copy(var_file, var_file + '.bak')
		subprocess.run("envsubst", input=file_contents.encode(), stdout=open(var_file, 'w'))

# substitute 'module_version' in a file 'main.tf' as workaround for issue https://github.com/hashicorp/terraform/issues/28912
def substitute_tf_file(module):
	tf_file = 'main.tf'
	module_version = None

	with open(var_file, 'r') as file:
		file_contents = json.load(file)

	for key, value in file_contents.items():
		if module in key:
			if 'module_version' in value:
				module_version = value['module_version']
				os.environ['TF_MODULE_VERSION'] = module_version
	            
				with open(tf_file, 'r') as file:
					file_contents = file.read()
	            
				if any(prefix in file_contents for prefix in ['TF_', 'GCP_', 'CI_']):
					shutil.copy(tf_file, tf_file + '.bak')
					subprocess.run("envsubst", input=file_contents.encode(), stdout=open(tf_file, 'w'))
			break
	
	return tf_file, module_version

# validate 'args.modules'
def validate_args_modules():
	if not isinstance(args.modules, list): # check whether the 'args.modules' is a list or not
	    args.modules = [args.modules]
	
	if args.modules == ['all']: # check whether the 'args.modules' is 'all'
		list_modules.remove('all')
		
		if args.action == 'destroy': # iterate over the list of modules in reverse order if action is 'destroy'
			args.modules = reversed(list_modules)
		else:
			args.modules = list_modules

# terraform init function
def run_terraform_init():
	subprocess.run("rm -rf .terraform*", shell=True, check=True)
	subprocess.run("terraform init", shell=True, check=True)

# terraform plan function
def run_terraform_plan():
	subprocess.run("terraform plan -var-file=%s" % var_file, shell=True, check=True)

# terraform apply function
def run_terraform_apply(module, project):
	output = subprocess.check_output("terraform plan -var-file=%s" % var_file, shell=True, text=True) # return 'subprocess.check_output' output
	resource_diff_start = output.find("Terraform will perform the following actions:") # extract the resource differences section from the 'subprocess.check_output' output
	result = subprocess.run("terraform apply -var-file=%s" % var_file, shell=True) # return 'subprocess.run' result
	
	message_title = "The changes have been applied for the module '{}'"

	if resource_diff_start == -1:
		return None
	else:
		if result.returncode == 0:  # check whether returncode from result is '0', then send notification to slack
			post_message(message_title, module, project)

# terraform destroy function
def run_terraform_destroy(module, project):
	output = subprocess.check_output("terraform plan -var-file=%s -destroy" % var_file, shell=True, text=True)
	resource_diff_start = output.find("Terraform will perform the following actions:")
	result = subprocess.run("terraform destroy -var-file=%s" % var_file, shell=True)
	# result = subprocess.run("terraform plan -var-file=%s -destroy" % var_file, shell=True) # dry-run

	message_title = "The module '{}' has been destroyed"

	if resource_diff_start == -1:
		return None
	else:
		if result.returncode == 0:
			post_message(message_title, module, project)

# slack notification function
def post_message(message_title, module, project):
	slack_token = 'xoxb-<slack_token>' # slack token
	slack_channel = '<slack_channel>'  # slack channel

	host = requests.get('https://checkip.amazonaws.com').text.strip()

	attachments = [{"type":"mrkdwn","color":"#FFC300","title":message_title.format(module),"text":"Module: %s\nProject: %s\nHost: %s" % (module, project, host)}]

	requests.post('https://slack.com/api/chat.postMessage', {
        'token': slack_token,
        'channel': slack_channel,
        'attachments': json.dumps(attachments)
    }).json()

# main function
def main(action, modules, organization, project, region):
	# declare terraform variables
	os.environ['TF_VAR_project'] = project
	os.environ['TF_VAR_region'] = region

	os.environ['GCP_PROJECT_ID'] = project

	substitute_tfvars()

	for module in modules:
		os.chdir(os.path.join(module_path, module)) # set path to the module

		tf_file, module_version = substitute_tf_file(module)
		
		substitute_tf_file(module)

		if module == 'backend':
			# set backend configuration
			backend = backend_bucket
			backend_path = "%s/%s" % (backend, project)
			os.environ['TF_CLI_ARGS_init'] = "-backend-config='bucket=%s' -backend-config='prefix=%s'" % (backend, project)
		else:
			if module == 'project':
				if hasattr(args, 'organization') and args.organization is not None:
					os.environ['TF_VAR_org_name'] = organization
				else:
					print('terraform: error: the following arguments are required: --organization')
					sys.exit()
			backend = "%s-tfstate" % project
			backend_prefix = 'global' # backend prefix for the global modules (example: gs://$backend/global/$module/default.tfstate)
			backend_path = "%s/%s/%s" % (backend, backend_prefix, module)
			os.environ['TF_CLI_ARGS_init'] = "-backend-config='bucket=%s' -backend-config='prefix=%s/%s'" % (backend, backend_prefix, module)
			
		print("\n----------------")
		if module_version is not None:
			console.print(f"[bold cyan]Module:[/bold cyan] [bold white]{module} v{module_version}[/bold white]")
		else:
			console.print("[bold cyan]Module:[/bold cyan]", module)
		console.print("\n[bold cyan]Project:[/bold cyan]", project)
		console.print("\n[bold cyan]Backend path:[/bold cyan]", backend_path)

		run_terraform_init()

		if action == 'plan':
			run_terraform_plan()
		elif action == 'apply':
			run_terraform_apply(module, project)
		elif action == 'destroy':
			if deletion_protection is True: # allow to destroy module(s) only when 'deletion_protection' is True
				console.print("[bold red]terraform: error: operation not permitted\nto destroy module(s) set 'deletion_protection' to 'False'[/bold red]")
			else:
				run_terraform_destroy(module, project)
				subprocess.run("gsutil rm -r gs://%s" % backend_path, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True) # remove folder described in 'backend_path' from backend

		# check whether the temporary '*.bak' file exists in a current folder and remove it
		if os.path.exists(tf_file + '.bak'):
			shutil.copy(tf_file + '.bak', tf_file)
			os.remove(tf_file + '.bak')
		
	# check whether the temporary '*.bak' file exists in a current folder and remove it
	if os.path.exists(var_file + '.bak'):
		shutil.copy(var_file + '.bak', var_file)
		os.remove(var_file + '.bak')

if __name__ == '__main__':
	validate_args_modules()
	main(action=args.action, modules=args.modules, organization=args.organization, project=args.project, region=args.region)
